/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { questionsControllerCreate } from '../fn/questions/questions-controller-create';
import { QuestionsControllerCreate$Params } from '../fn/questions/questions-controller-create';
import { questionsControllerFindAll } from '../fn/questions/questions-controller-find-all';
import { QuestionsControllerFindAll$Params } from '../fn/questions/questions-controller-find-all';
import { questionsControllerFindOne } from '../fn/questions/questions-controller-find-one';
import { QuestionsControllerFindOne$Params } from '../fn/questions/questions-controller-find-one';
import { questionsControllerUpdate } from '../fn/questions/questions-controller-update';
import { QuestionsControllerUpdate$Params } from '../fn/questions/questions-controller-update';
import { ReadQuestionDto } from '../models/read-question-dto';

@Injectable({ providedIn: 'root' })
export class QuestionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `questionsControllerFindAll()` */
  static readonly QuestionsControllerFindAllPath = '/api/questions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `questionsControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  questionsControllerFindAll$Response(params?: QuestionsControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReadQuestionDto>>> {
    return questionsControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `questionsControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  questionsControllerFindAll(params?: QuestionsControllerFindAll$Params, context?: HttpContext): Observable<Array<ReadQuestionDto>> {
    return this.questionsControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReadQuestionDto>>): Array<ReadQuestionDto> => r.body)
    );
  }

  /** Path part for operation `questionsControllerCreate()` */
  static readonly QuestionsControllerCreatePath = '/api/questions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `questionsControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  questionsControllerCreate$Response(params: QuestionsControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadQuestionDto>> {
    return questionsControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `questionsControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  questionsControllerCreate(params: QuestionsControllerCreate$Params, context?: HttpContext): Observable<ReadQuestionDto> {
    return this.questionsControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadQuestionDto>): ReadQuestionDto => r.body)
    );
  }

  /** Path part for operation `questionsControllerFindOne()` */
  static readonly QuestionsControllerFindOnePath = '/api/questions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `questionsControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  questionsControllerFindOne$Response(params: QuestionsControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadQuestionDto>> {
    return questionsControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `questionsControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  questionsControllerFindOne(params: QuestionsControllerFindOne$Params, context?: HttpContext): Observable<ReadQuestionDto> {
    return this.questionsControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadQuestionDto>): ReadQuestionDto => r.body)
    );
  }

  /** Path part for operation `questionsControllerUpdate()` */
  static readonly QuestionsControllerUpdatePath = '/api/questions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `questionsControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  questionsControllerUpdate$Response(params: QuestionsControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadQuestionDto>> {
    return questionsControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `questionsControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  questionsControllerUpdate(params: QuestionsControllerUpdate$Params, context?: HttpContext): Observable<ReadQuestionDto> {
    return this.questionsControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadQuestionDto>): ReadQuestionDto => r.body)
    );
  }

}
