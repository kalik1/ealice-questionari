/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { patientControllerCreate } from '../fn/patient/patient-controller-create';
import { PatientControllerCreate$Params } from '../fn/patient/patient-controller-create';
import { patientControllerFindAll } from '../fn/patient/patient-controller-find-all';
import { PatientControllerFindAll$Params } from '../fn/patient/patient-controller-find-all';
import { patientControllerFindOne } from '../fn/patient/patient-controller-find-one';
import { PatientControllerFindOne$Params } from '../fn/patient/patient-controller-find-one';
import { patientControllerRemove } from '../fn/patient/patient-controller-remove';
import { PatientControllerRemove$Params } from '../fn/patient/patient-controller-remove';
import { patientControllerUpdate } from '../fn/patient/patient-controller-update';
import { PatientControllerUpdate$Params } from '../fn/patient/patient-controller-update';
import { ReadPatientDto } from '../models/read-patient-dto';

@Injectable({ providedIn: 'root' })
export class PatientService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `patientControllerFindAll()` */
  static readonly PatientControllerFindAllPath = '/api/patient';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientControllerFindAll$Response(params?: PatientControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReadPatientDto>>> {
    return patientControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientControllerFindAll(params?: PatientControllerFindAll$Params, context?: HttpContext): Observable<Array<ReadPatientDto>> {
    return this.patientControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReadPatientDto>>): Array<ReadPatientDto> => r.body)
    );
  }

  /** Path part for operation `patientControllerCreate()` */
  static readonly PatientControllerCreatePath = '/api/patient';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientControllerCreate$Response(params: PatientControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadPatientDto>> {
    return patientControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientControllerCreate(params: PatientControllerCreate$Params, context?: HttpContext): Observable<ReadPatientDto> {
    return this.patientControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadPatientDto>): ReadPatientDto => r.body)
    );
  }

  /** Path part for operation `patientControllerFindOne()` */
  static readonly PatientControllerFindOnePath = '/api/patient/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientControllerFindOne$Response(params: PatientControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadPatientDto>> {
    return patientControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientControllerFindOne(params: PatientControllerFindOne$Params, context?: HttpContext): Observable<ReadPatientDto> {
    return this.patientControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadPatientDto>): ReadPatientDto => r.body)
    );
  }

  /** Path part for operation `patientControllerRemove()` */
  static readonly PatientControllerRemovePath = '/api/patient/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientControllerRemove$Response(params: PatientControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadPatientDto>> {
    return patientControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  patientControllerRemove(params: PatientControllerRemove$Params, context?: HttpContext): Observable<ReadPatientDto> {
    return this.patientControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadPatientDto>): ReadPatientDto => r.body)
    );
  }

  /** Path part for operation `patientControllerUpdate()` */
  static readonly PatientControllerUpdatePath = '/api/patient/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patientControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientControllerUpdate$Response(params: PatientControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadPatientDto>> {
    return patientControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patientControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patientControllerUpdate(params: PatientControllerUpdate$Params, context?: HttpContext): Observable<ReadPatientDto> {
    return this.patientControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadPatientDto>): ReadPatientDto => r.body)
    );
  }

}
