/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { coopControllerCreate } from '../fn/coop/coop-controller-create';
import { CoopControllerCreate$Params } from '../fn/coop/coop-controller-create';
import { coopControllerFindAll } from '../fn/coop/coop-controller-find-all';
import { CoopControllerFindAll$Params } from '../fn/coop/coop-controller-find-all';
import { coopControllerFindOne } from '../fn/coop/coop-controller-find-one';
import { CoopControllerFindOne$Params } from '../fn/coop/coop-controller-find-one';
import { coopControllerRemove } from '../fn/coop/coop-controller-remove';
import { CoopControllerRemove$Params } from '../fn/coop/coop-controller-remove';
import { coopControllerUpdate } from '../fn/coop/coop-controller-update';
import { CoopControllerUpdate$Params } from '../fn/coop/coop-controller-update';
import { ReadCoopDto } from '../models/read-coop-dto';

@Injectable({ providedIn: 'root' })
export class CoopService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `coopControllerFindAll()` */
  static readonly CoopControllerFindAllPath = '/api/coop';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coopControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  coopControllerFindAll$Response(params?: CoopControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReadCoopDto>>> {
    return coopControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coopControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  coopControllerFindAll(params?: CoopControllerFindAll$Params, context?: HttpContext): Observable<Array<ReadCoopDto>> {
    return this.coopControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReadCoopDto>>): Array<ReadCoopDto> => r.body)
    );
  }

  /** Path part for operation `coopControllerCreate()` */
  static readonly CoopControllerCreatePath = '/api/coop';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coopControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coopControllerCreate$Response(params: CoopControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadCoopDto>> {
    return coopControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coopControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coopControllerCreate(params: CoopControllerCreate$Params, context?: HttpContext): Observable<ReadCoopDto> {
    return this.coopControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadCoopDto>): ReadCoopDto => r.body)
    );
  }

  /** Path part for operation `coopControllerFindOne()` */
  static readonly CoopControllerFindOnePath = '/api/coop/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coopControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  coopControllerFindOne$Response(params: CoopControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadCoopDto>> {
    return coopControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coopControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  coopControllerFindOne(params: CoopControllerFindOne$Params, context?: HttpContext): Observable<ReadCoopDto> {
    return this.coopControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadCoopDto>): ReadCoopDto => r.body)
    );
  }

  /** Path part for operation `coopControllerRemove()` */
  static readonly CoopControllerRemovePath = '/api/coop/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coopControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  coopControllerRemove$Response(params: CoopControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadCoopDto>> {
    return coopControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coopControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  coopControllerRemove(params: CoopControllerRemove$Params, context?: HttpContext): Observable<ReadCoopDto> {
    return this.coopControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadCoopDto>): ReadCoopDto => r.body)
    );
  }

  /** Path part for operation `coopControllerUpdate()` */
  static readonly CoopControllerUpdatePath = '/api/coop/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `coopControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coopControllerUpdate$Response(params: CoopControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadCoopDto>> {
    return coopControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `coopControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  coopControllerUpdate(params: CoopControllerUpdate$Params, context?: HttpContext): Observable<ReadCoopDto> {
    return this.coopControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadCoopDto>): ReadCoopDto => r.body)
    );
  }

}
