/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { answerControllerCreate } from '../fn/answer/answer-controller-create';
import { AnswerControllerCreate$Params } from '../fn/answer/answer-controller-create';
import { answerControllerFindAll } from '../fn/answer/answer-controller-find-all';
import { AnswerControllerFindAll$Params } from '../fn/answer/answer-controller-find-all';
import { answerControllerFindOne } from '../fn/answer/answer-controller-find-one';
import { AnswerControllerFindOne$Params } from '../fn/answer/answer-controller-find-one';
import { answerControllerRemove } from '../fn/answer/answer-controller-remove';
import { AnswerControllerRemove$Params } from '../fn/answer/answer-controller-remove';
import { answerControllerUpdate } from '../fn/answer/answer-controller-update';
import { AnswerControllerUpdate$Params } from '../fn/answer/answer-controller-update';
import { ReadAnswerDto } from '../models/read-answer-dto';
import { ReadCoopDto } from '../models/read-coop-dto';

@Injectable({ providedIn: 'root' })
export class AnswerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `answerControllerFindAll()` */
  static readonly AnswerControllerFindAllPath = '/api/patient/{patientId}/answer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `answerControllerFindAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  answerControllerFindAll$Response(params: AnswerControllerFindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ReadAnswerDto>>> {
    return answerControllerFindAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `answerControllerFindAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  answerControllerFindAll(params: AnswerControllerFindAll$Params, context?: HttpContext): Observable<Array<ReadAnswerDto>> {
    return this.answerControllerFindAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ReadAnswerDto>>): Array<ReadAnswerDto> => r.body)
    );
  }

  /** Path part for operation `answerControllerCreate()` */
  static readonly AnswerControllerCreatePath = '/api/patient/{patientId}/answer';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `answerControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  answerControllerCreate$Response(params: AnswerControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadAnswerDto>> {
    return answerControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `answerControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  answerControllerCreate(params: AnswerControllerCreate$Params, context?: HttpContext): Observable<ReadAnswerDto> {
    return this.answerControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadAnswerDto>): ReadAnswerDto => r.body)
    );
  }

  /** Path part for operation `answerControllerFindOne()` */
  static readonly AnswerControllerFindOnePath = '/api/patient/{patientId}/answer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `answerControllerFindOne()` instead.
   *
   * This method doesn't expect any request body.
   */
  answerControllerFindOne$Response(params: AnswerControllerFindOne$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadCoopDto>> {
    return answerControllerFindOne(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `answerControllerFindOne$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  answerControllerFindOne(params: AnswerControllerFindOne$Params, context?: HttpContext): Observable<ReadCoopDto> {
    return this.answerControllerFindOne$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadCoopDto>): ReadCoopDto => r.body)
    );
  }

  /** Path part for operation `answerControllerRemove()` */
  static readonly AnswerControllerRemovePath = '/api/patient/{patientId}/answer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `answerControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  answerControllerRemove$Response(params: AnswerControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadAnswerDto>> {
    return answerControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `answerControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  answerControllerRemove(params: AnswerControllerRemove$Params, context?: HttpContext): Observable<ReadAnswerDto> {
    return this.answerControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadAnswerDto>): ReadAnswerDto => r.body)
    );
  }

  /** Path part for operation `answerControllerUpdate()` */
  static readonly AnswerControllerUpdatePath = '/api/patient/{patientId}/answer/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `answerControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  answerControllerUpdate$Response(params: AnswerControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ReadCoopDto>> {
    return answerControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `answerControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  answerControllerUpdate(params: AnswerControllerUpdate$Params, context?: HttpContext): Observable<ReadCoopDto> {
    return this.answerControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReadCoopDto>): ReadCoopDto => r.body)
    );
  }

}
